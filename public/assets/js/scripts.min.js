/*!
 * GulpBootstrapBoilerplate
 * Simple Gulp Bootstrap BoilerPlate
 * 
 * @author shweta ohlyan
 * @version 1.0.5
 * Copyright 2019. MIT licensed.
 */
!function(e,n,t,i){"use strict";!function(){function n(n){var i=e("<div>",{id:"question"}),o=e("<h2>Question "+(n+1)+":</h2>");i.append(o);var a=e("<p>").append(r[n].question);i.append(a);var s=t(n);return i.append(s),i}function t(n){for(var t,i=e("<ul>"),o="",a=0;a<r[n].choices.length;a++)t=e("<li>"),o='<input type="radio" name="answer" value='+a+" />",o+=r[n].choices[a],t.append(o),i.append(t);return i}function i(){c[s]=+e('input[name="answer"]:checked').val()}function o(){u.fadeOut(function(){if(e("#question").remove(),s<r.length){var t=n(s);u.append(t).fadeIn(),isNaN(c[s])||e("input[value="+c[s]+"]").prop("checked",!0),1===s?e("#prev").show():0===s&&(e("#prev").hide(),e("#next").show())}else{var i=a();u.append(i).fadeIn(),e("#next").hide(),e("#prev").hide(),e("#start").show()}})}function a(){for(var n=e("<p>",{id:"question"}),t=0,i=0;i<c.length;i++)c[i]===r[i].correctAnswer&&t++;return n.append("You got "+t+" questions out of "+r.length+" right!!!"),n}var r=[{question:"What is 10*5?",choices:[20,50,100,70,30],correctAnswer:1},{question:"What is india capital?",choices:["Delhi","Gurgaon","Chandighar","Hisar","none"],correctAnswer:0},{question:"Everything in React is a ?",choices:["Module","Class","Package","none","Component"],correctAnswer:4},{question:" In React what is used to pass data to a component from outside?",choices:["setState","render with arguments","props","PropTypes","none"],correctAnswer:2},{question:"What is 8*8?",choices:[20,30,40,50,64],correctAnswer:4}],s=0,c=[],u=e("#quiz");o(),e("#next").on("click",function(e){return e.preventDefault(),!u.is(":animated")&&(i(),void(isNaN(c[s])?alert("Please make a selection!"):(s++,o())))}),e("#prev").on("click",function(e){return e.preventDefault(),!u.is(":animated")&&(i(),s--,void o())}),e("#start").on("click",function(n){return n.preventDefault(),!u.is(":animated")&&(s=0,c=[],o(),void e("#start").hide())}),e(".button").on("mouseenter",function(){e(this).addClass("active")}),e(".button").on("mouseleave",function(){e(this).removeClass("active")})}()}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiY3JlYXRlUXVlc3Rpb25FbGVtZW50IiwiaW5kZXgiLCJxRWxlbWVudCIsImlkIiwiaGVhZGVyIiwiYXBwZW5kIiwicXVlc3Rpb24iLCJxdWVzdGlvbnMiLCJyYWRpb0J1dHRvbnMiLCJjcmVhdGVSYWRpb3MiLCJpdGVtIiwicmFkaW9MaXN0IiwiaW5wdXQiLCJpIiwiY2hvaWNlcyIsImxlbmd0aCIsImNob29zZSIsInNlbGVjdGlvbnMiLCJxdWVzdGlvbkNvdW50ZXIiLCJ2YWwiLCJkaXNwbGF5TmV4dCIsInF1aXoiLCJmYWRlT3V0IiwicmVtb3ZlIiwibmV4dFF1ZXN0aW9uIiwiZmFkZUluIiwiaXNOYU4iLCJwcm9wIiwic2hvdyIsImhpZGUiLCJzY29yZUVsZW0iLCJkaXNwbGF5U2NvcmUiLCJzY29yZSIsIm51bUNvcnJlY3QiLCJjb3JyZWN0QW5zd2VyIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJpcyIsImFsZXJ0IiwidGhpcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0NBQUEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxjQUVBLFdBb0ZBLFFBQUFDLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQU4sRUFBQSxTQUNBTyxHQUFBLGFBR0FDLEVBQUFSLEVBQUEsaUJBQUFLLEVBQUEsR0FBQSxTQUNBQyxHQUFBRyxPQUFBRCxFQUVBLElBQUFFLEdBQUFWLEVBQUEsT0FBQVMsT0FBQUUsRUFBQU4sR0FBQUssU0FDQUosR0FBQUcsT0FBQUMsRUFFQSxJQUFBRSxHQUFBQyxFQUFBUixFQUdBLE9BRkFDLEdBQUFHLE9BQUFHLEdBRUFOLEVBSUEsUUFBQU8sR0FBQVIsR0FJQSxJQUFBLEdBRkFTLEdBREFDLEVBQUFmLEVBQUEsUUFFQWdCLEVBQUEsR0FDQUMsRUFBQSxFQUFBQSxFQUFBTixFQUFBTixHQUFBYSxRQUFBQyxPQUFBRixJQUNBSCxFQUFBZCxFQUFBLFFBQ0FnQixFQUFBLDJDQUFBQyxFQUFBLE1BQ0FELEdBQUFMLEVBQUFOLEdBQUFhLFFBQUFELEdBQ0FILEVBQUFMLE9BQUFPLEdBQ0FELEVBQUFOLE9BQUFLLEVBRUEsT0FBQUMsR0FJQSxRQUFBSyxLQUNBQyxFQUFBQyxJQUFBdEIsRUFBQSxnQ0FBQXVCLE1BSUEsUUFBQUMsS0FDQUMsRUFBQUMsUUFBQSxXQUdBLEdBRkExQixFQUFBLGFBQUEyQixTQUVBTCxFQUFBWCxFQUFBUSxPQUFBLENBQ0EsR0FBQVMsR0FBQXhCLEVBQUFrQixFQUNBRyxHQUFBaEIsT0FBQW1CLEdBQUFDLFNBQ0FDLE1BQUFULEVBQUFDLEtBQ0F0QixFQUFBLGVBQUFxQixFQUFBQyxHQUFBLEtBQUFTLEtBQUEsV0FBQSxHQUlBLElBQUFULEVBQ0F0QixFQUFBLFNBQUFnQyxPQUNBLElBQUFWLElBRUF0QixFQUFBLFNBQUFpQyxPQUNBakMsRUFBQSxTQUFBZ0MsWUFFQSxDQUNBLEdBQUFFLEdBQUFDLEdBQ0FWLEdBQUFoQixPQUFBeUIsR0FBQUwsU0FDQTdCLEVBQUEsU0FBQWlDLE9BQ0FqQyxFQUFBLFNBQUFpQyxPQUNBakMsRUFBQSxVQUFBZ0MsVUFNQSxRQUFBRyxLQUlBLElBQUEsR0FIQUMsR0FBQXBDLEVBQUEsT0FBQU8sR0FBQSxhQUVBOEIsRUFBQSxFQUNBcEIsRUFBQSxFQUFBQSxFQUFBSSxFQUFBRixPQUFBRixJQUNBSSxFQUFBSixLQUFBTixFQUFBTSxHQUFBcUIsZUFDQUQsR0FNQSxPQUZBRCxHQUFBM0IsT0FBQSxXQUFBNEIsRUFBQSxxQkFDQTFCLEVBQUFRLE9BQUEsYUFDQWlCLEVBbktBLEdBQUF6QixLQUNBRCxTQUFBLGdCQUNBUSxTQUFBLEdBQUEsR0FBQSxJQUFBLEdBQUEsSUFDQW9CLGNBQUEsSUFFQTVCLFNBQUEseUJBQ0FRLFNBQUEsUUFBQSxVQUFBLGFBQUEsUUFBQSxRQUNBb0IsY0FBQSxJQUVBNUIsU0FBQSw2QkFDQVEsU0FBQSxTQUFBLFFBQUEsVUFBQSxPQUFBLGFBQ0FvQixjQUFBLElBRUE1QixTQUFBLG1FQUNBUSxTQUFBLFdBQUEsd0JBQUEsUUFBQSxZQUFBLFFBQ0FvQixjQUFBLElBRUE1QixTQUFBLGVBQ0FRLFNBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxJQUNBb0IsY0FBQSxJQUdBaEIsRUFBQSxFQUNBRCxLQUNBSSxFQUFBekIsRUFBQSxRQUdBd0IsS0FHQXhCLEVBQUEsU0FBQXVDLEdBQUEsUUFBQSxTQUFBQyxHQUlBLE1BSEFBLEdBQUFDLGtCQUdBaEIsRUFBQWlCLEdBQUEsZUFHQXRCLFNBR0FVLE1BQUFULEVBQUFDLElBQ0FxQixNQUFBLDZCQUVBckIsSUFDQUUsU0FLQXhCLEVBQUEsU0FBQXVDLEdBQUEsUUFBQSxTQUFBQyxHQUdBLE1BRkFBLEdBQUFDLGtCQUVBaEIsRUFBQWlCLEdBQUEsZUFHQXRCLElBQ0FFLFFBQ0FFLFFBSUF4QixFQUFBLFVBQUF1QyxHQUFBLFFBQUEsU0FBQUMsR0FHQSxNQUZBQSxHQUFBQyxrQkFFQWhCLEVBQUFpQixHQUFBLGVBR0FwQixFQUFBLEVBQ0FELEtBQ0FHLFFBQ0F4QixHQUFBLFVBQUFpQyxVQUlBakMsRUFBQSxXQUFBdUMsR0FBQSxhQUFBLFdBQ0F2QyxFQUFBNEMsTUFBQUMsU0FBQSxZQUVBN0MsRUFBQSxXQUFBdUMsR0FBQSxhQUFBLFdBQ0F2QyxFQUFBNEMsTUFBQUUsWUFBQSxnQkF5RkFDLE9BQUE5QyxPQUFBQyIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHF1ZXN0aW9ucyA9IFt7XHJcbiAgICAgIHF1ZXN0aW9uOiBcIldoYXQgaXMgMTAqNT9cIixcclxuICAgICAgY2hvaWNlczogWzIwLCA1MCwgMTAwLCA3MCwgMzBdLFxyXG4gICAgICBjb3JyZWN0QW5zd2VyOiAxXHJcbiAgICB9LCB7XHJcbiAgICAgIHF1ZXN0aW9uOiBcIldoYXQgaXMgaW5kaWEgY2FwaXRhbD9cIixcclxuICAgICAgY2hvaWNlczogWydEZWxoaScsICdHdXJnYW9uJywgJ0NoYW5kaWdoYXInLCAnSGlzYXInLCAnbm9uZSddLFxyXG4gICAgICBjb3JyZWN0QW5zd2VyOiAwXHJcbiAgICB9LCB7XHJcbiAgICAgIHF1ZXN0aW9uOiBcIkV2ZXJ5dGhpbmcgaW4gUmVhY3QgaXMgYSA/XCIsXHJcbiAgICAgIGNob2ljZXM6IFsnTW9kdWxlJywgJ0NsYXNzJywgJ1BhY2thZ2UnLCAnbm9uZScsICdDb21wb25lbnQnXSxcclxuICAgICAgY29ycmVjdEFuc3dlcjogNFxyXG4gICAgfSwge1xyXG4gICAgICBxdWVzdGlvbjogXCIgSW4gUmVhY3Qgd2hhdCBpcyB1c2VkIHRvIHBhc3MgZGF0YSB0byBhIGNvbXBvbmVudCBmcm9tIG91dHNpZGU/XCIsXHJcbiAgICAgIGNob2ljZXM6IFsnc2V0U3RhdGUnLCAncmVuZGVyIHdpdGggYXJndW1lbnRzJywgJ3Byb3BzJywgJ1Byb3BUeXBlcycsICdub25lJ10sXHJcbiAgICAgIGNvcnJlY3RBbnN3ZXI6IDJcclxuICAgIH0sIHtcclxuICAgICAgcXVlc3Rpb246IFwiV2hhdCBpcyA4Kjg/XCIsXHJcbiAgICAgIGNob2ljZXM6IFsyMCwgMzAsIDQwLCA1MCwgNjRdLFxyXG4gICAgICBjb3JyZWN0QW5zd2VyOiA0XHJcbiAgICB9XTtcclxuICAgIFxyXG4gICAgdmFyIHF1ZXN0aW9uQ291bnRlciA9IDA7IC8vVHJhY2tzIHF1ZXN0aW9uIG51bWJlclxyXG4gICAgdmFyIHNlbGVjdGlvbnMgPSBbXTsgLy9BcnJheSBjb250YWluaW5nIHVzZXIgY2hvaWNlc1xyXG4gICAgdmFyIHF1aXogPSAkKCcjcXVpeicpOyAvL1F1aXogZGl2IG9iamVjdFxyXG4gICAgXHJcbiAgICAvLyBEaXNwbGF5IGluaXRpYWwgcXVlc3Rpb25cclxuICAgIGRpc3BsYXlOZXh0KCk7XHJcbiAgICBcclxuICAgIC8vIENsaWNrIGhhbmRsZXIgZm9yIHRoZSAnbmV4dCcgYnV0dG9uXHJcbiAgICAkKCcjbmV4dCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFN1c3BlbmQgY2xpY2sgbGlzdGVuZXIgZHVyaW5nIGZhZGUgYW5pbWF0aW9uXHJcbiAgICAgIGlmKHF1aXouaXMoJzphbmltYXRlZCcpKSB7ICAgICAgICBcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgY2hvb3NlKCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBJZiBubyB1c2VyIHNlbGVjdGlvbiwgcHJvZ3Jlc3MgaXMgc3RvcHBlZFxyXG4gICAgICBpZiAoaXNOYU4oc2VsZWN0aW9uc1txdWVzdGlvbkNvdW50ZXJdKSkge1xyXG4gICAgICAgIGFsZXJ0KCdQbGVhc2UgbWFrZSBhIHNlbGVjdGlvbiEnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBxdWVzdGlvbkNvdW50ZXIrKztcclxuICAgICAgICBkaXNwbGF5TmV4dCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gQ2xpY2sgaGFuZGxlciBmb3IgdGhlICdwcmV2JyBidXR0b25cclxuICAgICQoJyNwcmV2Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBcclxuICAgICAgaWYocXVpei5pcygnOmFuaW1hdGVkJykpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgY2hvb3NlKCk7XHJcbiAgICAgIHF1ZXN0aW9uQ291bnRlci0tO1xyXG4gICAgICBkaXNwbGF5TmV4dCgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIENsaWNrIGhhbmRsZXIgZm9yIHRoZSAnU3RhcnQgT3ZlcicgYnV0dG9uXHJcbiAgICAkKCcjc3RhcnQnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIFxyXG4gICAgICBpZihxdWl6LmlzKCc6YW5pbWF0ZWQnKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBxdWVzdGlvbkNvdW50ZXIgPSAwO1xyXG4gICAgICBzZWxlY3Rpb25zID0gW107XHJcbiAgICAgIGRpc3BsYXlOZXh0KCk7XHJcbiAgICAgICQoJyNzdGFydCcpLmhpZGUoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBBbmltYXRlcyBidXR0b25zIG9uIGhvdmVyXHJcbiAgICAkKCcuYnV0dG9uJykub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgfSk7XHJcbiAgICAkKCcuYnV0dG9uJykub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZXMgYW5kIHJldHVybnMgdGhlIGRpdiB0aGF0IGNvbnRhaW5zIHRoZSBxdWVzdGlvbnMgYW5kIFxyXG4gICAgLy8gdGhlIGFuc3dlciBzZWxlY3Rpb25zXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVRdWVzdGlvbkVsZW1lbnQoaW5kZXgpIHtcclxuICAgICAgdmFyIHFFbGVtZW50ID0gJCgnPGRpdj4nLCB7XHJcbiAgICAgICAgaWQ6ICdxdWVzdGlvbidcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgaGVhZGVyID0gJCgnPGgyPlF1ZXN0aW9uICcgKyAoaW5kZXggKyAxKSArICc6PC9oMj4nKTtcclxuICAgICAgcUVsZW1lbnQuYXBwZW5kKGhlYWRlcik7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgcXVlc3Rpb24gPSAkKCc8cD4nKS5hcHBlbmQocXVlc3Rpb25zW2luZGV4XS5xdWVzdGlvbik7XHJcbiAgICAgIHFFbGVtZW50LmFwcGVuZChxdWVzdGlvbik7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgcmFkaW9CdXR0b25zID0gY3JlYXRlUmFkaW9zKGluZGV4KTtcclxuICAgICAgcUVsZW1lbnQuYXBwZW5kKHJhZGlvQnV0dG9ucyk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gcUVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZXMgYSBsaXN0IG9mIHRoZSBhbnN3ZXIgY2hvaWNlcyBhcyByYWRpbyBpbnB1dHNcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhZGlvcyhpbmRleCkge1xyXG4gICAgICB2YXIgcmFkaW9MaXN0ID0gJCgnPHVsPicpO1xyXG4gICAgICB2YXIgaXRlbTtcclxuICAgICAgdmFyIGlucHV0ID0gJyc7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVlc3Rpb25zW2luZGV4XS5jaG9pY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaXRlbSA9ICQoJzxsaT4nKTtcclxuICAgICAgICBpbnB1dCA9ICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImFuc3dlclwiIHZhbHVlPScgKyBpICsgJyAvPic7XHJcbiAgICAgICAgaW5wdXQgKz0gcXVlc3Rpb25zW2luZGV4XS5jaG9pY2VzW2ldO1xyXG4gICAgICAgIGl0ZW0uYXBwZW5kKGlucHV0KTtcclxuICAgICAgICByYWRpb0xpc3QuYXBwZW5kKGl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByYWRpb0xpc3Q7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFJlYWRzIHRoZSB1c2VyIHNlbGVjdGlvbiBhbmQgcHVzaGVzIHRoZSB2YWx1ZSB0byBhbiBhcnJheVxyXG4gICAgZnVuY3Rpb24gY2hvb3NlKCkge1xyXG4gICAgICBzZWxlY3Rpb25zW3F1ZXN0aW9uQ291bnRlcl0gPSArJCgnaW5wdXRbbmFtZT1cImFuc3dlclwiXTpjaGVja2VkJykudmFsKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIERpc3BsYXlzIG5leHQgcmVxdWVzdGVkIGVsZW1lbnRcclxuICAgIGZ1bmN0aW9uIGRpc3BsYXlOZXh0KCkge1xyXG4gICAgICBxdWl6LmZhZGVPdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCgnI3F1ZXN0aW9uJykucmVtb3ZlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYocXVlc3Rpb25Db3VudGVyIDwgcXVlc3Rpb25zLmxlbmd0aCl7XHJcbiAgICAgICAgICB2YXIgbmV4dFF1ZXN0aW9uID0gY3JlYXRlUXVlc3Rpb25FbGVtZW50KHF1ZXN0aW9uQ291bnRlcik7XHJcbiAgICAgICAgICBxdWl6LmFwcGVuZChuZXh0UXVlc3Rpb24pLmZhZGVJbigpO1xyXG4gICAgICAgICAgaWYgKCEoaXNOYU4oc2VsZWN0aW9uc1txdWVzdGlvbkNvdW50ZXJdKSkpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXRbdmFsdWU9JytzZWxlY3Rpb25zW3F1ZXN0aW9uQ291bnRlcl0rJ10nKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIENvbnRyb2xzIGRpc3BsYXkgb2YgJ3ByZXYnIGJ1dHRvblxyXG4gICAgICAgICAgaWYocXVlc3Rpb25Db3VudGVyID09PSAxKXtcclxuICAgICAgICAgICAgJCgnI3ByZXYnKS5zaG93KCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYocXVlc3Rpb25Db3VudGVyID09PSAwKXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICQoJyNwcmV2JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcjbmV4dCcpLnNob3coKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICB2YXIgc2NvcmVFbGVtID0gZGlzcGxheVNjb3JlKCk7XHJcbiAgICAgICAgICBxdWl6LmFwcGVuZChzY29yZUVsZW0pLmZhZGVJbigpO1xyXG4gICAgICAgICAgJCgnI25leHQnKS5oaWRlKCk7XHJcbiAgICAgICAgICAkKCcjcHJldicpLmhpZGUoKTtcclxuICAgICAgICAgICQoJyNzdGFydCcpLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDb21wdXRlcyBzY29yZSBhbmQgcmV0dXJucyBhIHBhcmFncmFwaCBlbGVtZW50IHRvIGJlIGRpc3BsYXllZFxyXG4gICAgZnVuY3Rpb24gZGlzcGxheVNjb3JlKCkge1xyXG4gICAgICB2YXIgc2NvcmUgPSAkKCc8cD4nLHtpZDogJ3F1ZXN0aW9uJ30pO1xyXG4gICAgICBcclxuICAgICAgdmFyIG51bUNvcnJlY3QgPSAwO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoc2VsZWN0aW9uc1tpXSA9PT0gcXVlc3Rpb25zW2ldLmNvcnJlY3RBbnN3ZXIpIHtcclxuICAgICAgICAgIG51bUNvcnJlY3QrKztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHNjb3JlLmFwcGVuZCgnWW91IGdvdCAnICsgbnVtQ29ycmVjdCArICcgcXVlc3Rpb25zIG91dCBvZiAnICtcclxuICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9ucy5sZW5ndGggKyAnIHJpZ2h0ISEhJyk7XHJcbiAgICAgIHJldHVybiBzY29yZTtcclxuICAgIH1cclxuICB9KSgpO1xyXG5cclxufSkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuIl19
